/*
 * Meltwater Streaming API v2
 * The Meltwater Streaming API provides the needed resources for Meltwater clients to create & delete REST Hooks and stream Meltwater search results to your specified destination.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@api.meltwater.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ErrorsCollection;
import io.swagger.client.model.Hook;
import io.swagger.client.model.HooksCollection;
import io.swagger.client.model.PostV2Hooks;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HooksApi
 */
@Ignore
public class HooksApiTest {

    private final HooksApi api = new HooksApi();

    
    /**
     * Creates a hook for one of your predefined searches.
     *
     * Creates a hook for one of your predefined searches.  Delivers search results for the query referenced by the &#x60;search_id&#x60; to the &#x60;target_url&#x60; via HTTP POST. Note that a &#x60;hook_id&#x60; will be returned on successful creation, this id is needed to delete the hook.   We are also returning the header: &#x60;X-Hook-Secret&#x60;, a shared secret used to sign the document body pushed to your &#x60;target_url&#x60;.    Requires an OAuth access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHookTest() throws ApiException {
        String userKey = null;
        String authorization = null;
        PostV2Hooks v2Hooks = null;
        String xHookSecret = null;
        Hook response = api.createHook(userKey, authorization, v2Hooks, xHookSecret);

        // TODO: test validations
    }
    
    /**
     * Delete an existing hook.
     *
     * Delete an existing hook.  Removes the hook and stops sending any search results to the target_url.    Requires an OAuth access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHookTest() throws ApiException {
        String userKey = null;
        String authorization = null;
        String hookId = null;
        api.deleteHook(userKey, authorization, hookId);

        // TODO: test validations
    }
    
    /**
     * List all hooks.
     *
     * List all hooks.     Delivers all previously generated hooks.    Requires an OAuth access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllHooksTest() throws ApiException {
        String userKey = null;
        String authorization = null;
        HooksCollection response = api.getAllHooks(userKey, authorization);

        // TODO: test validations
    }
    
}
