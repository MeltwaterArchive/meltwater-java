/**
 * The Meltwater API
 * The Meltwater API provides the needed resources for Meltwater clients to create & delete REST Hooks and stream Meltwater search results to your specified destination.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@api.meltwater.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ErrorsCollection;
import io.swagger.client.model.Hook;
import io.swagger.client.model.PostV1Hooks;
import io.swagger.client.model.HooksCollection;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HooksApi
 */
public class HooksApiTest {

    private final HooksApi api = new HooksApi();

    
    /**
     * Creates a hook for one of your predefined searches.
     *
     * Creates a hook for one of your predefined searches.  Delivers search results for the query referenced by thesearch_id to the target_url via HTTP POST. Note that a hook id will be returned on successful creation, this id is needed to delete the hook.     Requires an OAuth access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHookTest() throws ApiException {
        String userKey = null;
        String authorization = null;
        PostV1Hooks v1Hooks = null;
        // Hook response = api.createHook(userKey, authorization, v1Hooks);

        // TODO: test validations
    }
    
    /**
     * Delete an existing hook.
     *
     * Delete an existing hook.  Removes the hook and stops sending any search results to the target_url.    Requires an OAuth access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHookTest() throws ApiException {
        String userKey = null;
        String authorization = null;
        String id = null;
        // api.deleteHook(userKey, authorization, id);

        // TODO: test validations
    }
    
    /**
     * List all hooks.
     *
     * List all hooks.     Delivers all previously generated hooks.    Requires an OAuth access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllHooksTest() throws ApiException {
        String userKey = null;
        String authorization = null;
        // HooksCollection response = api.getAllHooks(userKey, authorization);

        // TODO: test validations
    }
    
}
